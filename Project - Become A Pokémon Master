poketypes = {
  'Fire': {'Water': 0.5, 'Grass': 2},
  'Water': {'Fire': 2, 'Grass': 0.5},
  'Grass': {'Fire': 0.5, 'Water': 2}
}

class Pokemon:
  def __init__(self, name, level, health, max_health, typ, is_knocked_out):
    self.name = name
    self.level = level
    self.health = health
    self.max_health = max_health
    self.typ = typ
    self.is_knocked_out = ko_status

  knocked_out = False

  def lose_health(self, damage):
    self.health = self.health-damage
    if self.health <= 0:
      self.knock_out()
    else:
      print(self.name, " lost ", damage, " health. It now has ", self.health, " left.")

  def gain_health(self, heal):
    self.health = self.health + heal
    if self.health >= self.max_health:
      self.health = self.max_health
    else:
      None
      print(self.name, " got healed ", damage, " health. It now has ", self.health, " left.")
      

  def revive(self):
    print(self.name, " has been revived with ", self.health, " health.")
    self.knocked_out = False

  def knock_out(self):
    print(self.name, " is knocked out!")
    self.knocked_out = True
    
  
  def attack(self, other):
    multiplier = poketypes.get(self.poketype, 1).get(other.poketype)
    attack = 1 * multiplier
    print(self.name, " attacked ", other.name, "with ", attack)
    if multiplier == 0.5:
      print("It's not very effective.")
    elif multiplier == 2:
      print("It's very effective.")
      self.gain_exp(1)
    other.lose_health(attack)
    self.gain_exp(1)

   
  def gain_exp(self, exp):
    self.exp += exp
    print("{} gained {} xp.\n".format(self.name, exp))
    if self.exp >= 3:
      self.level_up()


  def level_up(self):
    self.exp = 0
    self.level += 1
    self.max_health += 1
    self.health = self.max_health
    print("{} leveled up to level {}! Max health now is {}. Health fully regenerated.\n".format(self.name, self.level, self.max_health))
  
    
  def __repr__(self):
    return f"{self.name}"

class Trainer:
  def __init__(self, name, pokemons, total_potions):
    self.name = name
    self.pokemons = pokemons[:6] if len(pokemons) > 6 else pokemons
    self.pokemon = self.pokemons[0]
    self.total_potions = total_potions
    
   def attack(self, other):
      if self.pokemon.knocked_out == False:
        self.pokemon.attack(other.pokemon)
      else:
        print(f'{self.pokemon.name} is knocked out, choose another pokemon {self.name}.')
        
       def use_potion(self):
      if self.total_potions > 0:
        print(f'{self.name} used potion on {self.pokemon.name}')
        self.pokemon.gain_health(5)
        self.total_potions -= 1
      else:
        print(f"{self.name} cannot use potion, There's no more.")
        
      def swap_pokemon(self, number):
      if self.pokemons[number] == self.pokemon:
        print(f'{self.name} cannot swap out active pokemon with active pokemon.')
      elif not self.pokemons[number].knocked_out:
        print(f'{self.name} swapped out {self.pokemon} with {self.pokemons[number]}')
        self.pokemon = self.pokemons[number]
      else:
        print(f'{self.pokemons[number]} is knocked out. Choose another pokemon, {self.name}.')
        
        
     
    def __repr__(self):
      print(f'{self.name} currently has the following pokemons:')
      for pokemon in self.pokemons:
        print(pokemon)
        return f'Current pokemon: {self.pokemon}'


class FireType(Pokemon):
  def __init__(self, name, level):
    super().__init__(name, level, 'Fire')


class GrassType(Pokemon):
  def __init__(self, name, level):
    super().__init__(name, level, 'Grass')


class WaterType(Pokemon):
  def __init__(self, name, level):
    super().__init__(name, level, 'Water')
